# GitHub Actions workflow for running Doro bot
name: Run Doro Bot

on:
  workflow_dispatch:
    inputs:
      run_duration:
        description: 'Run duration in hours (max 6)'
        required: false
        default: '6'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'

jobs:
  run-bot-continuous:
    runs-on: windows-latest
    timeout-minutes: 360
    
    strategy:
      # Restart job if it fails
      fail-fast: false
      matrix:
        attempt: [1]
    
    steps:
      # Discord notification - Started
      - name: Discord Webhook - Started
        run: |
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          if ([string]::IsNullOrWhiteSpace($webhookUrl)) {
            Write-Host "No webhook URL configured, skipping notification"
            exit 0
          }
          
          $payload = @{
            embeds = @(
              @{
                title = "üöÄ Bot Started"
                description = "GitHub Actions is starting the bot"
                color = 3447003
                fields = @(
                  @{
                    name = "Repository"
                    value = "${{ github.repository }}"
                    inline = $true
                  }
                  @{
                    name = "Duration"
                    value = "${{ github.event.inputs.run_duration }} hours"
                    inline = $true
                  }
                )
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
              }
            )
          } | ConvertTo-Json -Depth 10
          
          try {
            Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType "application/json"
            Write-Host "‚úÖ Webhook notification sent"
          } catch {
            Write-Host "‚ö†Ô∏è Webhook notification failed: $_"
          }
        shell: pwsh
        continue-on-error: true
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'
      
      - name: Install FFmpeg
        run: |
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "ffmpeg_temp" -Force
          $ffmpegFolder = Get-ChildItem -Path "ffmpeg_temp" -Directory | Select-Object -First 1
          Move-Item -Path "$($ffmpegFolder.FullName)\bin\*" -Destination "." -Force
          Remove-Item -Path "ffmpeg.zip" -Force
          Remove-Item -Path "ffmpeg_temp" -Recurse -Force
        shell: pwsh
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: pwsh
      
      - name: Create .env file
        run: |
          @"
          DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
          NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          BOT_OWNER_IDS=${{ secrets.BOT_OWNER_IDS }}
          FFMPEG_PATH=./ffmpeg.exe
          "@ | Out-File -FilePath ".env" -Encoding utf8
        shell: pwsh
      
      - name: Run Bot
        run: |
          # Run for 358.5 minutes (stop 90s before timeout)
          $endTime = (Get-Date).AddMinutes(358.5)
          $restartCount = 0
          
          Write-Host "Bot will run until: $endTime (358.5 minutes)" -ForegroundColor Green
          
          while ((Get-Date) -lt $endTime) {
            try {
              Write-Host "Starting bot (attempt: $($restartCount + 1))" -ForegroundColor Yellow
              
              $process = Start-Process -FilePath "python" -ArgumentList "main.py" -PassThru -NoNewWindow
              
              # Monitor process
              while (-not $process.HasExited -and (Get-Date) -lt $endTime) {
                Start-Sleep -Seconds 30
              }
              
              if ($process.HasExited) {
                Write-Host "Bot stopped with exit code: $($process.ExitCode)" -ForegroundColor Red
                $restartCount++
                
                if ($restartCount -lt 10) {
                  Write-Host "Restarting in 10 seconds..." -ForegroundColor Yellow
                  Start-Sleep -Seconds 10
                } else {
                  Write-Host "Maximum restart attempts reached" -ForegroundColor Red
                  break
                }
              } else {
                # Time limit reached, stop the bot gracefully
                Write-Host "‚è∞ Time's up! Stopping bot gracefully..." -ForegroundColor Yellow
                Stop-Process -Id $process.Id -Force
                Start-Sleep -Seconds 5
                Write-Host "‚úÖ Bot stopped successfully" -ForegroundColor Green
                break
              }
            } catch {
              Write-Host "Error: $_" -ForegroundColor Red
              Start-Sleep -Seconds 10
            }
          }
          
          # Wait 30 seconds before next workflow triggers
          Write-Host "‚è≥ Waiting 30 seconds before next workflow..." -ForegroundColor Cyan
          Start-Sleep -Seconds 30
          
          Write-Host "Bot session completed successfully" -ForegroundColor Green
        shell: pwsh
      
      # Discord notification - Completed
      - name: Discord Webhook - Completed
        if: always()
        run: |
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          if ([string]::IsNullOrWhiteSpace($webhookUrl)) {
            Write-Host "No webhook URL configured, skipping notification"
            exit 0
          }
          
          $status = "${{ job.status }}"
          $color = if ($status -eq "success") { 5763719 } else { 15548997 }
          $title = if ($status -eq "success") { "‚úÖ Bot Stopped" } else { "‚ùå Bot Failed" }
          
          $payload = @{
            embeds = @(
              @{
                title = $title
                description = "Bot session has ended"
                color = $color
                fields = @(
                  @{
                    name = "Status"
                    value = $status
                    inline = $true
                  }
                  @{
                    name = "Repository"
                    value = "${{ github.repository }}"
                    inline = $true
                  }
                )
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
              }
            )
          } | ConvertTo-Json -Depth 10
          
          try {
            Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType "application/json"
            Write-Host "‚úÖ Webhook notification sent"
          } catch {
            Write-Host "‚ö†Ô∏è Webhook notification failed: $_"
          }
        shell: pwsh
        continue-on-error: true
        
  # # DISABLED: Automatic workflow restart
  # # Uncomment this section if you want automatic restart
  # trigger-next-run:
  #   needs: run-bot-continuous
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'workflow_dispatch'
  #   
  #   steps:
  #     - name: Trigger next workflow run
  #       run: |
  #         Write-Host "‚ö†Ô∏è Automatic workflow restart is DISABLED" -ForegroundColor Yellow
  #         Write-Host "Please manually trigger the workflow when needed" -ForegroundColor Yellow
  #       shell: pwsh
